{"ast":null,"code":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport api from '../services/api';\nconst useAuthStore = create(persist((set, get) => ({\n  user: null,\n  token: null,\n  isAuthenticated: false,\n  isLoading: false,\n  error: null,\n  // Login\n  login: async (email, password) => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n      const {\n        user,\n        token\n      } = response.data;\n      set({\n        user,\n        token,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      });\n\n      // Set token in API headers\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      return {\n        success: true,\n        user\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Login failed';\n      set({\n        isLoading: false,\n        error: errorMessage\n      });\n      throw new Error(errorMessage);\n    }\n  },\n  // Register\n  register: async userData => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await api.post('/auth/register', userData);\n      const {\n        user,\n        token\n      } = response.data;\n      set({\n        user,\n        token,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      });\n\n      // Set token in API headers\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      return {\n        success: true,\n        user\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Registration failed';\n      set({\n        isLoading: false,\n        error: errorMessage\n      });\n      throw new Error(errorMessage);\n    }\n  },\n  // Logout\n  logout: () => {\n    set({\n      user: null,\n      token: null,\n      isAuthenticated: false,\n      isLoading: false,\n      error: null\n    });\n\n    // Remove token from API headers\n    delete api.defaults.headers.common['Authorization'];\n\n    // Clear local storage\n    localStorage.removeItem('auth-storage');\n  },\n  // Update user profile\n  updateProfile: async profileData => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await api.put('/auth/profile', profileData);\n      const {\n        user\n      } = response.data;\n      set({\n        user,\n        isLoading: false,\n        error: null\n      });\n      return {\n        success: true,\n        user\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      const errorMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Profile update failed';\n      set({\n        isLoading: false,\n        error: errorMessage\n      });\n      throw new Error(errorMessage);\n    }\n  },\n  // Get user profile\n  getProfile: async () => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await api.get('/auth/profile');\n      const {\n        user\n      } = response.data;\n      set({\n        user,\n        isLoading: false,\n        error: null\n      });\n      return {\n        success: true,\n        user\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      const errorMessage = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Failed to fetch profile';\n      set({\n        isLoading: false,\n        error: errorMessage\n      });\n      throw new Error(errorMessage);\n    }\n  },\n  // Check if token is valid\n  checkAuth: async () => {\n    const {\n      token\n    } = get();\n    if (!token) {\n      set({\n        isAuthenticated: false\n      });\n      return false;\n    }\n    try {\n      // Set token in API headers\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n      // Verify token by getting profile\n      await get().getProfile();\n      return true;\n    } catch (error) {\n      // Token is invalid, logout\n      get().logout();\n      return false;\n    }\n  },\n  // Clear error\n  clearError: () => set({\n    error: null\n  }),\n  // Set loading state\n  setLoading: loading => set({\n    isLoading: loading\n  })\n}), {\n  name: 'auth-storage',\n  partialize: state => ({\n    user: state.user,\n    token: state.token,\n    isAuthenticated: state.isAuthenticated\n  })\n}));\nexport default useAuthStore;","map":{"version":3,"names":["create","persist","api","useAuthStore","set","get","user","token","isAuthenticated","isLoading","error","login","email","password","response","post","data","defaults","headers","common","success","_error$response","_error$response$data","errorMessage","Error","register","userData","_error$response2","_error$response2$data","logout","localStorage","removeItem","updateProfile","profileData","put","_error$response3","_error$response3$data","getProfile","_error$response4","_error$response4$data","checkAuth","clearError","setLoading","loading","name","partialize","state"],"sources":["C:/Users/kelvin/Desktop/kijumbe/frontend/src/stores/authStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport api from '../services/api';\n\nconst useAuthStore = create(\n  persist(\n    (set, get) => ({\n      user: null,\n      token: null,\n      isAuthenticated: false,\n      isLoading: false,\n      error: null,\n\n      // Login\n      login: async (email, password) => {\n        set({ isLoading: true, error: null });\n        try {\n          const response = await api.post('/auth/login', { email, password });\n          const { user, token } = response.data;\n          \n          set({\n            user,\n            token,\n            isAuthenticated: true,\n            isLoading: false,\n            error: null,\n          });\n          \n          // Set token in API headers\n          api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n          \n          return { success: true, user };\n        } catch (error) {\n          const errorMessage = error.response?.data?.error || 'Login failed';\n          set({\n            isLoading: false,\n            error: errorMessage,\n          });\n          throw new Error(errorMessage);\n        }\n      },\n\n      // Register\n      register: async (userData) => {\n        set({ isLoading: true, error: null });\n        try {\n          const response = await api.post('/auth/register', userData);\n          const { user, token } = response.data;\n          \n          set({\n            user,\n            token,\n            isAuthenticated: true,\n            isLoading: false,\n            error: null,\n          });\n          \n          // Set token in API headers\n          api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n          \n          return { success: true, user };\n        } catch (error) {\n          const errorMessage = error.response?.data?.error || 'Registration failed';\n          set({\n            isLoading: false,\n            error: errorMessage,\n          });\n          throw new Error(errorMessage);\n        }\n      },\n\n      // Logout\n      logout: () => {\n        set({\n          user: null,\n          token: null,\n          isAuthenticated: false,\n          isLoading: false,\n          error: null,\n        });\n        \n        // Remove token from API headers\n        delete api.defaults.headers.common['Authorization'];\n        \n        // Clear local storage\n        localStorage.removeItem('auth-storage');\n      },\n\n      // Update user profile\n      updateProfile: async (profileData) => {\n        set({ isLoading: true, error: null });\n        try {\n          const response = await api.put('/auth/profile', profileData);\n          const { user } = response.data;\n          \n          set({\n            user,\n            isLoading: false,\n            error: null,\n          });\n          \n          return { success: true, user };\n        } catch (error) {\n          const errorMessage = error.response?.data?.error || 'Profile update failed';\n          set({\n            isLoading: false,\n            error: errorMessage,\n          });\n          throw new Error(errorMessage);\n        }\n      },\n\n      // Get user profile\n      getProfile: async () => {\n        set({ isLoading: true, error: null });\n        try {\n          const response = await api.get('/auth/profile');\n          const { user } = response.data;\n          \n          set({\n            user,\n            isLoading: false,\n            error: null,\n          });\n          \n          return { success: true, user };\n        } catch (error) {\n          const errorMessage = error.response?.data?.error || 'Failed to fetch profile';\n          set({\n            isLoading: false,\n            error: errorMessage,\n          });\n          throw new Error(errorMessage);\n        }\n      },\n\n      // Check if token is valid\n      checkAuth: async () => {\n        const { token } = get();\n        if (!token) {\n          set({ isAuthenticated: false });\n          return false;\n        }\n\n        try {\n          // Set token in API headers\n          api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n          \n          // Verify token by getting profile\n          await get().getProfile();\n          return true;\n        } catch (error) {\n          // Token is invalid, logout\n          get().logout();\n          return false;\n        }\n      },\n\n      // Clear error\n      clearError: () => set({ error: null }),\n\n      // Set loading state\n      setLoading: (loading) => set({ isLoading: loading }),\n    }),\n    {\n      name: 'auth-storage',\n      partialize: (state) => ({\n        user: state.user,\n        token: state.token,\n        isAuthenticated: state.isAuthenticated,\n      }),\n    }\n  )\n);\n\nexport default useAuthStore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}